FORMAT: 1A
HOST: https://sandbox.karolina.io/agitator

# Agitator

An API for crowdfunding and crowdsourcing.

The API allows you to create a frontend and use the provided backend to power your crowdfunding website. The API documentation is organized by endpoints (e.g. /users/, /campaigns/). You are provided with examples and additional information where necessary.

**Error handling:** All responses with code 200 should be considered successful but 5xx or 4xx not.

**Response status:** Responses should include the key *status* in the JSON which should be *success* for 200 responses,
but may include *error* or some other key depending on the context.

Error responses should include the field *message* which should be a human readable error message.

# Group Campaigns

Campaigns are the basic element of crowdfunding. In reward-based crowdfunding, campaigns are often referred to as *projects*. Each Createed user may create and edit a campaign. Admin user may add other users to the **team**, which allows them to edit a campaign.

A campaign may pass through several stages:
* Private
* Preparing
* Raising funds
* Executing
* Finished
* Canceled

Depending on the stage, a campaign has different levels of visibility. Admin user can always see a campaign, but a guest user can only see it if it is not **Private**. The stage also defines the permitted actions that a normal user can make. E.g. campaign creator can edit the campaign until it moves to **raising funds**. After that, only an admin user may edit campaign settings.

Each campaign also has admin-level settings, that only an admin user can change. Some of those are: *funding deadline*, *campaign stage*, *associated payment wallet*, etc.

Campaign content (title, description, etc.) is saved separately for each available language. In absence of language specific text, the default fallback language text is returned (usually English).

## Campaigns [/campaigns/]

### Create new campaign [POST]

This endpoint allows you to create a new campaign. You need to include an **Authorization** header of the user that is the creator of this campaign. The response contains the id of the created campaign.

Possible errors:
* Authorization header is not provided
* Authorization header is invalid

+ Request (application/json)
    + Headers

            Authorization: Bearer <JWToken>

+ Response 200 (application/json)
    + Attributes (Create campaign Response)

+ Request missing authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error 2 Response)

+ Request invalid authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

## Single campaign [/campaigns/{campaign_id}/{language}]

The **Authorization** header is optional, but you need to provide it in order to gain editing capabilities or to view a private campaign.

+ Parameters
    + campaign_id: 1 (string) - ID of the campaign.
    + language: en (string) - The preferred language to return, e.g. en, is, fi.

### Get campaign [GET]

Returns a single campaign. You need to specify the id of the campaign and the language that you wish to get the information in. Depending on the stage of the campaign, you may need to include an **Authorization** header in order to see the campaign.

For example, you can use the information to display an single campaign page where your visitors can see all the information regarding a campaign.

Possible errors:
* Campaign is private and Authorization header is not provided
* Campaign does not exist
* Authorization header is invalid

+ Request (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 200 (application/json)
    + Attributes (Get campaign Response)

+ Request private campaign (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request non-existing campaign (application/json)

+ Response 404 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

## Campaigns previews [/campaigns/preview/{language}/]

+ Parameters
    + language: en (string) - The preferred language to return, i.e. en, is, fi

## Get campaigns previews [GET]

Returns a list of campaigns that are currently funding or have been funding in the past. Includes only basic information for preview (such as title, goal, funding reached, last day of funding, picture url, etc.).

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Get campaigns previews Response)

## Campaign backers [/campaigns/{campaign_id}/backers]

+ Parameters
    + campaign_id: 1 (string) - ID of the campaign.

### Get campaign backers [GET]

Returns an array of users that have backed a campaign. You need to specify the id of the campaign.

+ Request (application/json)

+ Response 200 (application/json)
    + Attributes (Get campaign backers Response)


## Campaign language [/campaigns/{campaign_id}/language/]

Allows you to update the content of a campaign. You need to provide the id of the campaign that you wish to update, the language of the text and include an **Authorization** header for a user that is allowed to update this campaign. You can update pre-defined sections such as: title, short description, tagline, etc.

Possible errors:
* Authorization header is not provided
* Campaign does not exist
* Authorization header is invalid

+ Parameters
    + campaign_id: 1 (string) - ID of the campaign

### Update campaign language [PATCH]

+ Request (application/json)

    + Headers

            Authorization: Bearer <JWToken>

    + Attribute (Update campaign language Request)

+ Response 200 (application/json)
    + Attributes (Update campaign language Response)

+ Request without authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request non-existing campaign (application/json)

+ Response 404 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

## Campaign settings [/campaigns/{campaign_id}/settings/]

Allows you to update the settings of a campaign. You need to provide the id of the campaign that you wish to update and include an **Authorization** header for a user that is allowed to update this campaign. Some of the settings that you can update are: target goal, funding deadline, campaign picture, contact email, etc.

Possible errors:
* Authorization header is not provided
* Campaign does not exist
* Authorization header is invalid

+ Parameters
    + campaign_id: 1 (string) - ID of the campaign

### Update campaign settings [PATCH]

+ Request (application/json)
    + Headers

            Authorization: Bearer <JWToken>

    + Attributes (Update campaign settings Request)

+ Response 200 (application/json)
    + Attributes (Update campaign settings Response)

+ Request without authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request non-existing campaign (application/json)

+ Response 404 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

## Campaign meta [/campaigns/{campaign_id}/meta/]

Allows you to save any aribtrary key:value pair to a campaign.

Possible errors:
* Authorization header is not provided
* Campaign does not exist
* Authorization header is invalid

+ Parameters
    + campaign_id: 1 (string) - ID of the campaign

### Update campaign meta [PATCH]

+ Request (application/json)
    + Headers

            Authorization: Bearer <JWToken>

    + Attributes (Update campaign meta Request)

+ Response 200 (application/json)
    + Attributes (Update campaign meta Response)

+ Request without authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request non-existing campaign (application/json)

+ Response 404 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

## Campaign admin [/campaigns/{campaign_id}/admin/]

Allows an admin user to view and edit the admin settings of the campaign. You need to provide the id of the campaign that you wish to update and an **Authorization** header for an admin user. You can see settings such as: payment wallet id, stage, commision percentage, etc.

+ Parameters
    + campaign_id: 1 (string) - ID of the campaign

### Get campaign admin [GET]

Possible errors:
* Authorization header is not provided
* Campaign does not exist
* Authorization header is invalid

+ Request (application/json)
    + Headers

            Authorization: Bearer <JWToken>

+ Response 200 (application/json)
    + Attribute (Get campaign admin Response)

+ Request without authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request non-existing campaign (application/json)

+ Response 404 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

### Update campaign admin [PATCH]

Possible errors:
* Authorization header is not provided
* Campaign does not exist
* Authorization header is invalid

+ Request (application/json)

    + Headers

            Authorization: Bearer <JWToken>

    + Attribute (Update campaign admin Request)

+ Response 200 (application/json)
    + Attribute (Update campaign admin Response)

+ Request without authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error 3 Response)

+ Request non-existing campaign (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

## My campaigns previews [/campaigns/mycampaigns/preview/{language}]

+ Parameters
    + language: en (string) - The preferred language to return, i.e. en, is, fi

### Get my campaigns previews [GET]

Allows you to fetch an array of campaigns for the currently authenticated user. You need to include an **Authorization** header that defines the user for which the campaigns are being fetched. The returned campaigns are those that the authorized user can edit.

Possible errors:
* Authorization header is not provided
* Authorization header is invalid

+ Request (application/json)

    + Headers

            Authorization: Bearer <JWToken>

+ Response 200 (application/json)
    + Attributes (Get campaigns previews Response)

+ Request without authorization (application/json)

+ Response 500 (application/json)
    + Attributes (Authentication error Response)

+ Request invalid authorization (application/json)
    + Headers

              Authorization: Bearer <JWToken>

+ Response 500 (application/json)
    + Attributes (Authentication incorrect error Response)

# Group Users

## Users [/users/]

The visitors of your website are considered guests until they authenticate (log in). Once authenticated, they become users. Users can create **campaigns**, make **pledges** and edit **campaigns** of which they are a part of (as a team member). There are some actions that can only be executed by an **administrator**. An administrator is a type of a user that has higher privileges that other users and has access to some settings that are hidden to normal users.

### Create a new user [POST]

Creates a new user. Returns an authentication token for that user.

Possible errors:
* Email already in use
* Email invalid

+ Request (application/json)
    + Attributes (Create user Request)

+ Response 200 (application/json)
    + Attributes (Get users tokens Response)

+ Request email already in use (application/json)
    + Attributes (Create user Request)

+ Response 500 (application/json)
    + Attributes (Create user email exists Response)

+ Request wrong email format (application/json)
    + Attributes
      + Include Create user Request
      + email: example_email.com

+ Response 500 (application/json)
    + Attributes (Create user invalid email Response)

## Users tokens [/users/tokens/]

### Generate a token for a user [POST]

Generates an authentication token for a user. You can use that token in subsequent requests to authorize by placing the token in the **Authorization** header, like so:

`Authorization:Bearer <JWToken>`

Possible errors:
* User does not exist in the system
* Wrong password
* Missing password
* Not a valid email

+ Request (application/json)
    + Attributes (Get users tokens Request)

+ Response 200 (application/json)
    + Attributes (Get users tokens Response)

+ Request non-existing user (application/json)
    + Attributes (Get users tokens Request)
      + email: example@email.comm

+ Response 401 (application/json)
    + Attributes (Get users tokens wrong credentials no user Response)

+ Request wrong password (application/json)
    + Attributes (Get users tokens Request)
      + password: password1234

+ Response 401 (application/json)
    + Attributes (Get users tokens wrong credentials incorrect Response)

+ Request wrong email format (application/json)
    + Attributes
      + Include Get users tokens Request
      + email: example_email.com

+ Response 400 (application/json)
    + Attributes (Get users tokens error email invalid Response)

+ Request no password provided (application/json)
    + Attributes (User email base)

+ Response 400 (application/json)
    + Attributes (Get users tokens error no password Response)

# Data Structures

## Status success (object, fixed)
+ status: success (string)

## Status error (object, fixed)
+ status: error (string)

## Status error email exists (object, fixed)
+ status: email_already_exists (string)

## Status error missing credentials (object, fixed)
+ status: missing_credentials (string)

## Status error wrong credentials (object, fixed)
+ status: wrong_credentials (string)

## Status error invalid email (object, fixed)
+ status: invalid_email (string)

## Status error invalid arguments (object, fixed)
+ status: invalid_arguments (string)

## Error message didnt work (object, fixed)
+ message: Sorry, didn't work (string)

## Error message password provided (object, fixed)
+ message: Password must be provided. (string)

## Error message email invalid (object, fixed)
+ message: `Not a valid e-mail` (string)

## Error message invalid email (object, fixed)
+ message: `E-mail address is not valid.` (string)

## Error message short first name (object, fixed)
+ message: First name must be at least 2 characters (string)

## Error message short last name (object, fixed)
+ message: Last name must be at least 2 characters (string)

## Error message email exists (object, fixed)
+ message: `A user with this e-mail address already exists.` (string)

## Error message credentials no user (object, fixed)
+ message: User does not exist. (string)

## Error message credentials incorrect (object, fixed)
+ message: `Password or e-mail incorrect, or user does not exist.` (string)

## Error message cant get user (object, fixed)
+ message: `Cant get user` (string)

## Error message could not find (object, fixed)
+ message: `Could not find user` (string)

## Error message problems (object, fixed)
+ message: `Problems with platform authentication: Wrong signature - Please contact administrator.` (string)

## Error message not authorized (object, fixed)
+ message: `Sorry, you are not authorized to do this.` (string)

## Exception type Karolina exception (object, fixed)
+ exception_type: `Karolina\\Exception` (string)

## Success message updated ok (object, fixed)
+ message: `updated ok` (string)

## Success message action successful (object, fixed)
+ message: `Action successful` (string)

## Success message action successful 2 (object, fixed)
+ message: `Action successful.` (string)

## Success message roger (object, fixed)
+ message: `roger` (string)

## Acl (array, fixed-type)
+ view (string)
+ edit (string)
+ admin (string)

## Campaign id base (object, fixed-type)
+ campaign_id: 1 (string)

## Campaign base (object, fixed-type)
+ Include Campaign id base
+ title: My Campaign (string)
+ short_description (string, nullable)
+ tagline (string, nullable)
+ json_description (string, nullable)
+ html_description (string)
+ target_goal: 0 (number)
+ min_goal: 0 (number)
+ video_url (string, nullable)
+ meta (string, nullable)
+ video_embed_code (string, nullable)
+ stage: 0 (number)
+ funding_reached: 0 (number)
+ funding_deadline: 0 (number)
+ last_day_of_funding: `1969-12-31` (string)
+ first_day_of_funding: `1970-01-01` (string)
+ funding_start: 0 (number)
+ number_of_backers: 0 (number)
+ project_pic (string)
+ creator_pic (string)
+ subscriptions_amount_total: 120 (number)
+ subscriptions_subscribers_count: 4 (number)
+ subscriptions_goals (Subscription goals, optional)
+ rewards (Rewards, optional)

## Subscription goal base (object, fixed-type)
+ goal_id: 123 (string)
+ target: 100 (number)
+ title: My goal (string)
+ description: My description of this goal (string)

## Reward base (object, fixed-type)
+ reward_id: 123 (string)
+ stock_reserved: 0 (number)
+ vat_percentage (string, nullable)
+ stock: 0 (number, nullable)
+ amount: 1 (number)
+ title: reward (string)
+ description: This is a reward (string)
+ image (string, nullable)

## User preview base (object, fixed-type)
+ user_id: 123 (string)
+ first_name: John (string)
+ last_name: Smith (string)
+ short_description: Some user (string)
+ image (string, optional)

## Campaign preview base (object, fixed-type)
+ campaign_id: 123 (string)
+ title: My Campaign (string)
+ short_description (string, nullable)
+ target_goal: 0 (number)
+ min_goal: 0 (number)
+ category_id: 1 (string, nullable)
+ stage: 0 (number)
+ funding_reached: 0 (number)
+ funding_deadline: 0 (number)
+ last_day_of_funding: `1969-12-31` (string)
+ project_pic (string)

## User email base (object, fixed-type)
+ email: example@example.com (string)

## Rewards (array) - An array of different rewards based on the Reward base object
+ (Reward base)
+ (Reward base)
  + reward_id: 234 (string)
  + amount: 5 (number)
+ (Reward base)
  + reward_id: 345 (string)
  + amount: 10 (number)
  + stock: 5 (number, nullable)
+ (Reward base)
  + reward_id: 456 (string)
  + amount: 15 (number)
  + stock_reserved: 3 (number)
  + stock: 3 (number, nullable)
+ (Reward base)
  + reward_id: 567 (string)
  + amount: 50 (number)

## Subscription goals (array) - An array of different subscription goals based on the Subscription goal base object
+ (Subscription goal base)
+ (Subscription goal base)
  + goal_id: 234 (string)
  + target: 200 (number)
+ (Subscription goal base)
  + goal_id: 345 (string)
  + target: 300 (number)
+ (Subscription goal base)
  + goal_id: 456 (string)
  + target: 400 (number)

## Users previews (array) - An array of different user previews based on the User preview base object
+ (User preview base)
+ (User preview base)
  + user_id: 234 (string)
  + first_name: Jack (string)
+ (User preview base)
  + user_id: 345 (string)
  + first_name: Jill (string)
+ (User preview base)
  + user_id: 456 (string)
  + last_name: Stone (string)
+ (User preview base)
  + user_id: 567 (string)
  + last_name: McLane (string)

## Campaigns previews (array) - An array of different user previews based on the User preview base object
+ (Campaign preview base)
+ (Campaign preview base)
  + campaign_id: 234 (string)
  + min_goal: 200 (number)
  + funding_reached: 100
+ (Campaign preview base)
  + campaign_id: 345 (string)
  + min_goal: 300 (number)
  + stage: 3
  + funding_reached: 350
+ (Campaign preview base)
  + campaign_id: 456 (string)
  + min_goal: 500 (number)
  + stage: 4
  + funding_reached: 600
+ (Campaign preview base)
  + campaign_id: 567 (string)
  + min_goal: 1000 (number)
  + stage: 5
  + funding_reached: 700
+ (Campaign preview base)
  + campaign_id: 678 (string)
  + min_goal: 5000 (number)
  + stage: 6
  + funding_reached: 3500

## Get campaign Response (object, fixed-type)
+ campaign (Campaign base)
  + min_goal: 5000 (number)
+ acl (Acl)
+ Include Status success
+ Include Success message action successful

## Get campaigns previews Response (object, fixed-type)
+ campaigns (Campaigns previews)
+ Include Status success
+ Include Success message action successful

## Create campaign Response (object, fixed-type)
+ campaign (object)
  + Include Campaign id base
+ Include Status success
+ Include Success message action successful

## Update campaign settings Response (object, fixed)
+ Include Status success
+ Include Success message updated ok

## Get campaign backers Response (object, fixed-type)
+ previews (Users previews)
+ Include Status success
+ Include Success message action successful

## Update campaign meta Response (object, fixed)
+ Include Status success
+ Include Success message updated ok

## Update campaign language Response (object, fixed)
+ Include Status success
+ Include Success message action successful 2

## Get campaign admin Response (object, fixed-type)
+ payment_wallet_uuid: `a54528ac-bd19-4447-94ce-2244504febfe` (string)
+ stage: 2 (number)
+ contact_email: arnar@karolinafund.com (string, nullable)
+ category_id: 1 (string, nullable)
+ scope: `` (string, nullable)
+ legal_creator: Karolina Fund ehf (string, nullable)
+ commission_pertrans: 0.20 (string)
+ commission_percent: 5.1000 (string)
+ Include Status success
+ Include Success message action successful 2

## Update campaign admin Response (object, fixed)
+ Include Status success
+ Include Success message roger

## Get users tokens Response (object, fixed-type)
+ token (object)
  + string: lkjsdsdjsdaf.lkjasdlfksdfj.laksjdflkjsadklj (string)
+ Include Status success

## Get users tokens error Response (object, fixed)
+ Include Status error
+ Include Error message didnt work

## Get users tokens wrong credentials no user Response (object, fixed)
+ Include Status error wrong credentials
* Include Exception type Karolina exception
+ Include Error message credentials no user

## Get users tokens wrong credentials incorrect Response (object, fixed)
+ Include Status error wrong credentials
* Include Exception type Karolina exception
+ Include Error message credentials incorrect

## Get users tokens error no password Response (object, fixed)
+ Include Status error missing credentials
+ Include Exception type Karolina exception
+ Include Error message password provided

## Get users tokens error email invalid Response (object, fixed)
+ Include Status error missing credentials
* Include Exception type Karolina exception
+ Include Error message email invalid

## Create user email exists Response (object, fixed)
+ Include Status error
+ Include Error message email exists

## Create user invalid email Response (object, fixed)
+ Include Status error invalid email
+ Include Error message invalid email

## Create user short first Response (object, fixed)
+ Include Status error invalid arguments
+ Include Error message short first name

## Create user short last Response (object, fixed)
+ Include Status error invalid arguments
+ Include Error message short last name

## Authentication error Response (object, fixed)
+ Include Status error
+ Include Error message cant get user

## Authentication error 2 Response (object, fixed)
+ Include Status error
+ Include Error message could not find

## Authentication error 3 Response (object, fixed)
+ Include Status error
+ Include Error message not authorized

## Authentication incorrect error Response (object, fixed)
+ Include Status error
+ Include Error message problems

## Get users tokens Request (object)
+ Include User email base
+ password: password123 (string)

## Create user Request (object)
+ Include Get users tokens Request
+ first_name: John (string)
+ last_name: Smith (string)

## Update campaign settings Request (object)
+ min_goal: 1000 (number)
+ video_url: https://vimeo.com/220985345 (string)
+ target_goal: 1500 (number)
+ last_day_of_funding: `2016-12-09` (string)
+ first_day_of_funding: `2016-10-09` (string)
+ project_pic: projectpicture.jpg (string)
+ creator_pic: pictureofcreator.jpg (string)
+ contact_email: arnar@karolinafund.com (string)
+ legal_creator: Karolina Fund ehf (string)

## Update campaign meta Request (object)
+ external_link: https://www.karolinafund.com (string)

## Update campaign admin Request (object)
+ payment_wallet_uuid: `a54528ac-bd19-4447-94ce-2244504febfe` (string)
+ stage: 2 (number)
+ contact_email: arnar@karolinafund.com (string)
+ category_id: 1 (string, nullable)
+ scope: `` (string)
+ legal_creator: Karolina Fund ehf (string)
+ commission_pertrans: 0.20 (string)
+ commission_percent: 5.1000 (string)

## Update campaign language Request (object)
+ short_description
    + en: This project is all about making my debut CD. (string)
+ json_description
    + en: ´{"data":[{"type":"text","data":{"text":"Annað en þetta!","format":"html"}}]}´ (string)
+ title
    + en: This is a creative project (string)
+ tagline
    + en: My Creative project (string)
